ifeq (,$(filter $(CONTAINER_RUNTIME),podman docker))
    ifneq ($(shell command -v podman 2>/dev/null),)
        CONTAINER_RUNTIME := podman
    else ifneq ($(shell command -v docker 2>/dev/null),)
        CONTAINER_RUNTIME := docker
    else
        $(error No container runtime found: neither 'podman' nor 'docker' commands are available)
    endif
    $(info Container runtime auto-resolved to '$(CONTAINER_RUNTIME)')
else
    ifneq ($(shell command -v $(CONTAINER_RUNTIME) 2>/dev/null),)
        $(info Container runtime resolved to '$(CONTAINER_RUNTIME)' from env var)
    else
        $(error Container runtime '$(CONTAINER_RUNTIME)' from env var is not available)
    endif
endif

CONFIG_FILE = config.toml

export TQ_CMD := $(CONTAINER_RUNTIME) run --rm -u $(shell id -u):$(shell id -g) -i tq:local

COMPOSE_FILES = -f "docker-compose.yml" -f "nginx/.nginx-ports.yml"
COMPOSE_ENV_FILES = --env-file="./env/.env.compose" --env-file="./env/.env.docker_sock"

define get_config_value
$(shell $(TQ_CMD) tq -r '$(1)' < "$(CONFIG_FILE)")
endef

define get_proxy_ports
$(shell $(TQ_CMD) tq -r 'proxy.ports' < "$(CONFIG_FILE)" | $(TQ_CMD) jq -r '. | join(",")')
endef

define check_tq
$(shell $(CONTAINER_RUNTIME) images -q tq:local 2> /dev/null)
endef

.PHONY: config update-tq check-config update-nginx update-acmed update-acmesh update-dockergen update-docker-sock-gid generate-nginx-ports generate-compose-env init up stop restart down destroy

config:
	@echo "Copying default config to $(CONFIG_FILE)"
	@[ -f $(CONFIG_FILE) ] && echo -e "WARNING: $(CONFIG_FILE) file already exists \nIf you really wish to replace the config.toml file then please delete it first" || cp ./config/config.example.toml config.toml && sed -i '1,4{2{/DO NOT EDIT THIS FILE/!b};d}' config.toml

update-tq:
	@[ ! -z "$(call check_tq)" ] || (echo "Building tq" && $(CONTAINER_RUNTIME) build -t tq:local tq)

check-config: update-tq
	@[ ! -f $(CONFIG_FILE) ] && (echo "$(CONFIG_FILE) is missing, run 'make config' first" && exit 1) || exit 0
	@[ $(call get_config_value,global.letsencrypt_tos_agree) = 'true' ] || (echo "You didn't agree to Letencrypt Terms of Service, can't proceed" && exit 1)

update-nginx: check-config
	@echo "Updating nginx"
	@scripts/update_repo.sh "$(call get_config_value,nginx.repo)" "https://github.com/nginxinc/docker-nginx-unprivileged.git"
	@echo "Updating nginx file permissions"
	@scripts/set_permissions_nginx.sh "$(call get_config_value,nginx.gid)"

update-acmed: check-config
	@echo "Updating acmed"
	@scripts/update_repo.sh "$(call get_config_value,certs.acmed_repo)" "https://github.com/breard-r/acmed.git"
	@cp ./certs/acmed/acmed.Dockerfile "$(call get_config_value,certs.acmed_repo)" # TODO rewrite it in rust
	@echo "Generating acmed config"
	@scripts/generate_acmed_config.sh "$(CONTAINER_RUNTIME)"
	@echo "Updating certs permissions"
	@scripts/set_permissions_certs.sh "$(call get_config_value,certs.gid)"

update-acmesh: check-config
	@echo "Updating acme.sh"
	@scripts/update_repo.sh "$(call get_config_value,certs.acmesh_repo)" "https://github.com/acmesh-official/acme.sh.git"

update-dockergen: check-config
	@echo "Updating dockergen"
	@scripts/update_repo.sh "$(call get_config_value,dockergen.repo)" "https://github.com/nginx-proxy/docker-gen.git"
	@echo "Updating dockergen file permissions"
	@scripts/set_permissions_dockergen.sh "$(call get_config_value,dockergen.gid)"

update-docker-sock-gid: check-config
	@echo "Updating docker.sock gid"
	@scripts/update_docker_sock_gid.sh "$(CONTAINER_RUNTIME)"

generate-nginx-ports: check-config
	@echo "Updating nginx ports"
	@scripts/generate_nginx_ports.sh "$(call get_proxy_ports)" nginx/.nginx-ports.yml

generate-compose-env: check-config
	@echo "Updating compose .env"
	@scripts/generate_compose_env.sh env/.env.compose

init: check-config update-nginx update-acmed update-acmesh update-dockergen update-docker-sock-gid generate-nginx-ports generate-compose-env

up: check-config generate-nginx-ports generate-compose-env
	@echo "Deploying containers"
	@$(CONTAINER_RUNTIME) compose $(COMPOSE_FILES) $(COMPOSE_ENV_FILES) up -d

stop: check-config
	@echo "Stopping containers"
	@$(CONTAINER_RUNTIME) compose $(COMPOSE_FILES) $(COMPOSE_ENV_FILES) stop

restart: check-config
	@echo "Restarting containers"
	@$(CONTAINER_RUNTIME) compose $(COMPOSE_FILES) $(COMPOSE_ENV_FILES) restart

down: check-config
	@echo "Destroying containers"
	@$(CONTAINER_RUNTIME) compose $(COMPOSE_FILES) $(COMPOSE_ENV_FILES) down

destroy: check-config
	@echo "Destroying containers and volumes"
	@$(CONTAINER_RUNTIME) compose $(COMPOSE_FILES) $(COMPOSE_ENV_FILES) down -v
